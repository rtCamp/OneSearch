name: Test

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - synchronize

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name for pull requests
  # or the commit hash for any other events.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  pre-run:
    name: "Pre run"
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    timeout-minutes: 20
    outputs:
      changed-file-count: ${{ env.count }}
      changed-css-count: ${{ env.css-count }}
      changed-js-count: ${{ env['js-count'] }}
      changed-php-count: ${{ env['php-count'] }}
      changed-gha-workflow-count: ${{ env['gha-workflow-count'] }}

    steps:
      - name: Checkout including last 2 commits
        # Fetch last 2 commits if it's not a PR, so that we can determine the list of modified files.
        if: ${{ github.base_ref == null }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 2

      - name: Checkout
        # Do usual checkout if it's a PR.
        if: ${{ github.base_ref != null }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Fetch base branch
        # Only fetch base ref if it's a PR.
        if: ${{ github.base_ref != null }}
        run: git fetch --depth=1 --no-tags origin ${{ github.base_ref }}

      - name: Determine modified files for PR
        if: ${{ github.base_ref != null }}
        run: echo "MODIFIED_FILES=$(git diff --name-only FETCH_HEAD HEAD | base64 -w 0)" >> $GITHUB_ENV

      - name: Determine modified files for commit
        if: ${{ github.base_ref == null }}
        run: echo "MODIFIED_FILES=$(git diff --name-only HEAD~1 HEAD | base64 -w 0)" >> $GITHUB_ENV

      - id: determine-file-counts
        name: Determine if modified files should make the workflow run continue
        run: |
          MODIFIED_FILES=$(echo "$MODIFIED_FILES" | base64 -d)
          echo -e "Modified files:\n$MODIFIED_FILES\n"

          MODIFIED_FILES_DATA=$(node .github/bin/determine-modified-files-count.js "$IGNORE_PATH_REGEX" "$MODIFIED_FILES" "ignored")

          CSS_FILE_COUNT=$(node .github/bin/determine-modified-files-count.js ".+\.s?css|package\.json|package-lock\.json" "$MODIFIED_FILES")
          JS_FILE_COUNT=$(node .github/bin/determine-modified-files-count.js ".+\.(js|snap)|package\.json|package-lock\.json" "$MODIFIED_FILES")
          PHP_FILE_COUNT=$(node .github/bin/determine-modified-files-count.js ".+\.php|composer\.(json|lock)|phpstan\.neon\.dist" "$MODIFIED_FILES")
          GHA_WORKFLOW_COUNT=$(node .github/bin/determine-modified-files-count.js "(\.github\/workflows\/.+\.yml)" "$MODIFIED_FILES")

          echo "Changed file count: $FILE_COUNT"
          echo "Changed CSS file count: $CSS_FILE_COUNT"
          echo "Changed JS file count: $JS_FILE_COUNT"
          echo "Changed GHA workflow file count: $GHA_WORKFLOW_COUNT"

          echo "count=$MODIFIED_FILES_DATA" >> $GITHUB_ENV
          echo "css-count=$CSS_FILE_COUNT" >> $GITHUB_ENV
          echo "js-count=$JS_FILE_COUNT" >> $GITHUB_ENV
          echo "php-count=$PHP_FILE_COUNT" >> $GITHUB_ENV
          echo "gha-workflow-count=$GHA_WORKFLOW_COUNT" >> $GITHUB_ENV
        env:
          # Ignore Paths:
          # - .github/
          # - !.github/workflows
          # - .wordpress-org/
          # - docs/
          IGNORE_PATH_REGEX: \.github\/(?!workflows)|\.wordpress-org\/|docs\/

  # Lints the css files.
  #
  # Performs the following steps:
  # - Checks out the repository.
  # - Sets up Node.js.
  # - Installs npm dependencies.
  # - Runs Stylelint.
  lint-css:
    needs: pre-run
    if: needs.pre-run.outputs.changed-css-count > 0 || needs.pre-run.outputs.changed-gha-workflow-count > 0
    name: "Lint: CSS"
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          show-progress: ${{ runner.debug == '1' && 'true' || 'false' }}
          persist-credentials: false

      - name: Setup Node
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          cache: "npm"
          node-version-file: ".nvmrc"

      - name: Install NPM dependencies
        run: npm ci
        env:
          CI: true

      - name: Run Stylelint
        run: npm run lint:css

  # Runs the ESLint and Stylelint checks.
  #
  # Performs the following steps:
  # - Checks out the repository.
  # - Sets up Node.js.
  # - Installs npm dependencies.
  # - Runs ESLint.
  # - Builds assets to ensure no errors.
  lint-js:
    name: Lint JS
    needs: pre-run
    if: needs.pre-run.outputs.changed-js-count > 0 || needs.pre-run.outputs.changed-gha-workflow-count > 0
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          show-progress: ${{ runner.debug == '1' && 'true' || 'false' }}
          persist-credentials: false

      - name: Setup Node
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          cache: "npm"
          node-version-file: ".nvmrc"

      - name: Install NPM dependencies
        run: npm ci
        env:
          CI: true

      - name: Run ESLint
        run: npm run lint:js

      - name: Run build to ensure no errors
        run: npm run build:prod

  # Runs the PHP coding standards checks.
  #
  # Violations are reported inline with annotations.
  #
  # Performs the following steps:
  # - Checks out the repository.
  # - Sets up PHP.
  # - Configures caching for PHPCS scans.
  # - Installs Composer dependencies.
  # - Runs PHPCS on the full codebase.
  # - Generate a report for displaying issues as pull request annotations.
  phpcs:
    name: Run PHPCS coding standards checks
    needs: pre-run
    if: needs.pre-run.outputs.changed-php-count > 0 || needs.pre-run.outputs.changed-gha-workflow-count > 0
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          show-progress: ${{ runner.debug == '1' && 'true' || 'false' }}
          persist-credentials: false

      - name: Set up PHP
        uses: shivammathur/setup-php@bf6b4fbd49ca58e4608c9c89fba0b8d90bd2a39f # v2.35.5
        with:
          php-version: "8.3"
          coverage: none
          tools: cs2pr

      # This date is used to ensure that the PHPCS cache is cleared at least once every week.
      # http://man7.org/linux/man-pages/man1/date.1.html
      - name: "Get last Monday's date"
        id: get-date
        run: echo "date=$(/bin/date -u --date='last Mon' "+%F")" >> "$GITHUB_OUTPUT"

      - name: Cache PHPCS scan cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: tests/_output/phpcs-cache.json
          key: ${{ runner.os }}-date-${{ steps.get-date.outputs.date }}-phpcs-cache-${{ hashFiles('**/composer.json', 'phpcs.xml.dist') }}

      # Since Composer dependencies are installed using `composer update` and no lock file is in version control,
      # passing a custom cache suffix ensures that the cache is flushed at least once per week.
      - name: Install Composer dependencies
        uses: ramsey/composer-install@a2636af0004d1c0499ffca16ac0b4cc94df70565 # v3.1.0

      - name: Run PHPCS
        id: phpcs
        run: composer lint:php -- --report-full --report-checkstyle=./tests/_output/phpcs-report.xml

      - name: Show PHPCS results in PR
        if: ${{ always() && steps.phpcs.outcome == 'failure' }}
        run: cs2pr ./tests/_output/phpcs-report.xml --graceful-warnings

  # Runs PHP static analysis tests.
  #
  # Violations are reported inline with annotations.
  #
  # Performs the following steps:
  # - Checks out the repository.
  # - Sets up PHP.
  # - Configures caching for PHP static analysis scans.
  # - Installs Composer dependencies.
  # - Makes Composer packages available globally.
  # - Runs PHPStan static analysis (with Pull Request annotations).
  # - Saves the PHPStan result cache.
  phpstan:
    name: Run PHP static analysis
    needs: pre-run
    if: needs.pre-run.outputs.changed-php-count > 0 || needs.pre-run.outputs.changed-gha-workflow-count > 0
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          show-progress: ${{ runner.debug == '1' && 'true' || 'false' }}
          persist-credentials: false

      - name: Set up PHP
        uses: shivammathur/setup-php@bf6b4fbd49ca58e4608c9c89fba0b8d90bd2a39f # v2.35.5
        with:
          php-version: 8.3
          coverage: none
          tools: cs2pr

      # This date is used to ensure that the PHPCS cache is cleared at least once every week.
      # http://man7.org/linux/man-pages/man1/date.1.html
      - name: "Get last Monday's date"
        id: get-date
        run: echo "date=$(/bin/date -u --date='last Mon' "+%F")" >> "$GITHUB_OUTPUT"

      - name: Cache PHP Static Analysis scan cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: tests/_output # This is defined in the base.neon file.
          key: "phpstan-result-cache-${{ runner.os }}-date-${{ steps.get-date.outputs.date }}"
          restore-keys: |
            phpstan-result-cache-

      - name: Install Composer dependencies
        uses: ramsey/composer-install@a2636af0004d1c0499ffca16ac0b4cc94df70565 # v3.1.0

      - name: Make Composer packages available globally
        run: echo "${PWD}/vendor/bin" >> "$GITHUB_PATH"

      - name: Run PHP static analysis tests
        id: phpstan
        run: composer lint:php:stan -- -vvv --error-format=checkstyle | cs2pr

      - name: "Save result cache"
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        if: ${{ !cancelled() }}
        with:
          path: tests/_output
          key: "phpstan-result-cache-${{ runner.os }}-date-${{ steps.get-date.outputs.date }}"

  # Runs the PHPUnit tests for WordPress.

  # @todo Reenable coverage when repo is public
  #
  # Performs the following steps:
  # - Sets environment variables.
  # - Checks out the repository.
  # - Sets up PHP.
  # - Installs Composer dependencies.
  # - Sets up Node.js.
  # - Installs npm dependencies.
  # - Starts the WordPress Docker testing environment (with or without Xdebug coverage).
  # - Logs PHP and WordPress versions from the container.
  # - Runs PHPUnit tests (with coverage if enabled).
  # - Uploads code coverage report to Codecov.io (if coverage is enabled).
  # - Uploads HTML coverage report as an artifact (if coverage is enabled).
  # phpunit:
  #   name: Test PHP ${{ matrix.php }} WP ${{ matrix.wp }}${{ matrix.coverage && ' with coverage' || '' }}
  #   runs-on: ubuntu-24.04
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       php: ["8.4", "8.3", "8.2", "8.1", "8.0"]
  #       wp: [latest, trunk]
  #       coverage: [false]
  #       include:
  #         - php: "8.4"
  #           wp: latest
  #           coverage: true
  #   env:
  #     WP_ENV_PHP_VERSION: ${{ matrix.php }}
  #     WP_ENV_CORE: ${{ matrix.wp == 'trunk' && 'WordPress/WordPress' || format( 'https://wordpress.org/wordpress-{0}.zip', matrix.wp ) }}

  #   steps:
  #     - name: Configure environment variables
  #       run: |
  #         echo "PHP_FPM_UID=$(id -u)" >> "$GITHUB_ENV"
  #         echo "PHP_FPM_GID=$(id -g)" >> "$GITHUB_ENV"

  #     - name: Checkout repository
  #       uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
  #       with:
  #         show-progress: ${{ runner.debug == '1' && 'true' || 'false' }}
  #         persist-credentials: false

  #     ##
  #     # This allows Composer dependencies to be installed using a single step.
  #     #
  #     # Since the tests are currently run within the Docker containers where the PHP version varies,
  #     # the same PHP version needs to be configured for the action runner machine so that the correct
  #     # dependency versions are installed and cached.
  #     ##
  #     - name: Set up PHP
  #       uses: shivammathur/setup-php@bf6b4fbd49ca58e4608c9c89fba0b8d90bd2a39f # v2.35.5
  #       with:
  #         php-version: "${{ matrix.php }}"
  #         coverage: none

  #     - name: Install Composer dependencies
  #       uses: ramsey/composer-install@a2636af0004d1c0499ffca16ac0b4cc94df70565 # v3.1.0

  #     - name: Setup Node
  #       uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
  #       with:
  #         cache: "npm"
  #         node-version-file: ".nvmrc"

  #     - name: Install NPM dependencies
  #       run: npm ci
  #       env:
  #         CI: true

  #     - name: Start the Docker testing environment
  #       uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3.0.2
  #       with:
  #         timeout_minutes: 10
  #         max_attempts: 3
  #         command: |
  #           if [ "${{ matrix.coverage }}" == "true" ]; then
  #           npm run wp-env start -- --xdebug=coverage
  #           else
  #           npm run wp-env start
  #           fi

  #     - name: Log versions
  #       run: |
  #         npm run wp-env -- run cli php -- -v
  #         npm run wp-env -- run cli wp core version

  #     - name: Run PHPUnit tests${{ matrix.coverage && ' with coverage report' || '' }}
  #       id: phpunit
  #       run: |
  #         npm run test:php

  #     # @TODO Reenable when repo is public
  #     # - name: Upload code coverage report
  #     #   continue-on-error: true
  #     #   if: ${{ matrix.coverage }}
  #     #   uses: codecov/codecov-action@0565863a31f2c772f9f0395002a31e3f06189574 # v5.4.0
  #     #   with:
  #     #     token: ${{ secrets.CODECOV_TOKEN }}
  #     #     files: tests/_output/php-coverage.xml
  #     #     flags: unit
  #     #     fail_ci_if_error: true

  #     - name: Upload HTML coverage report as artifact
  #       if: ${{ matrix.coverage }}
  #       uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
  #       with:
  #         name: wp-code-coverage-${{ matrix.php }}-${{ matrix.wp }}
  #         path: tests/_output/html
  #         overwrite: true
